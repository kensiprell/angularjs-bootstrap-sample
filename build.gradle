import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.commons.io.FileUtils

buildscript {
	ext {
		bootstrapFrameworkVersion = "1.0.2"
		grailsVersion = project.grailsVersion
		bootstrapFramework = [
			//version             : "3.3.5",
			//cssPath             : "",
			//jsPath              : "",
			useIndividualJs: true,
			useLess        : true,
			//invalidVersionFails : false
			fontAwesome    : [
				install: true,
				//version             : "4.3.0"
				useLess: true,
				//invalidVersionFails : false
			]
		]
		assetPiplineGradleVersion = "2.3.8"
		assetPipelineGrailsVersion = "3.0.2"
		assetPipelineLessVersion = "2.3.0"
	}
	repositories {
		mavenLocal()
		jcenter()
		maven { url "https://repo.grails.org/grails/core" }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsVersion"
		classpath "com.siprell.plugins:bootstrap-framework:$bootstrapFrameworkVersion"
		classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPiplineGradleVersion"
		classpath "com.bertramlabs.plugins:less-asset-pipeline:$assetPipelineLessVersion"
	}
}

plugins {
	id "io.spring.dependency-management" version "0.5.1.RELEASE"
}

version bootstrapFrameworkVersion
group "com.siprell.plugins"

apply plugin: "com.siprell.plugins.bootstrap-framework"
apply plugin: "spring-boot"
apply plugin: "war"
apply plugin: "asset-pipeline"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"

ext {
	grailsVersion = project.grailsVersion
	gradleWrapperVersion = project.gradleWrapperVersion
	seleniumVersion = "2.46.0"
	phantomJsVersion = '1.9.7'
}

assets {
	minifyJs = true
	minifyCss = true
	excludes = ["mixins/*.less"]
}

repositories {
	mavenLocal()
	maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
	imports {
		mavenBom "org.grails:grails-bom:$grailsVersion"
	}
	applyMavenExclusions false
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-logging"
	compile "org.springframework.boot:spring-boot-starter-actuator"
	compile "org.springframework.boot:spring-boot-autoconfigure"
	compile "org.springframework.boot:spring-boot-starter-tomcat"
	compile "org.grails:grails-dependencies"
	compile "org.grails:grails-web-boot"

	compile "org.grails.plugins:hibernate"
	compile "org.grails.plugins:cache"
	compile "org.hibernate:hibernate-ehcache"

	runtime "org.grails.plugins:asset-pipeline:$assetPipelineGrailsVersion"
	runtime "com.bertramlabs.plugins:less-asset-pipeline:$assetPipelineLessVersion"
	runtime "org.grails.plugins:scaffolding"

	testCompile "org.grails:grails-plugin-testing"
	testCompile "org.grails.plugins:geb"
	testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
	testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
	testCompile("com.codeborne:phantomjsdriver:1.2.1") {
		transitive = false
	}

	console "org.grails:grails-console"
}

task downloadPhantomJs {
	def osFilenamePart
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		osFilenamePart = "windows.zip"
	} else if (Os.isFamily(Os.FAMILY_MAC)) {
		osFilenamePart = "macosx.zip"
	} else if (Os.isFamily(Os.FAMILY_UNIX)) {
		osFilenamePart = Os.isArch("amd64") ? "linux-x86_64.tar.bz2" : "linux-i686.tar.bz2"
	}

	def filename = "phantomjs-$phantomJsVersion-$osFilenamePart"
	def outputFile = file("$buildDir/webdriver/$filename")
	inputs.property("phantomJsVersion", phantomJsVersion)
	outputs.file(outputFile)

	doLast {
		FileUtils.copyURLToFile(new URL("https://bitbucket.org/ariya/phantomjs/downloads/$filename"), outputFile)
	}
}

task unzipPhantomJs(type: Copy) {
	def outputDir = file("$buildDir/webdriver/phantomjs")
	dependsOn downloadPhantomJs
	outputs.dir(outputDir)

	def archive = downloadPhantomJs.outputs.files.singleFile

	from(Os.isFamily(Os.FAMILY_MAC) || Os.isFamily(Os.FAMILY_WINDOWS) ? zipTree(archive) : tarTree(archive))
	into(outputDir)
	eachFile { FileCopyDetails fcp ->
		fcp.relativePath = new RelativePath(!fcp.directory, *fcp.relativePath.segments[1..-1])
	}
}

clean {
	def javascriptsTree = fileTree("grails-app/assets/javascripts") {
		include "**/*"
		exclude "jquery*.js"
	}
	def stylesheetsTree = fileTree("grails-app/assets/stylesheets") {
		include "**/*"
		exclude ".gitignore"
	}
	delete javascriptsTree
	delete stylesheetsTree
	delete "grails-app/assets/javascripts/bootstrap", "grails-app/assets/stylesheets/bootstrap", "grails-app/assets/stylesheets/font-awesome"
}

integrationTest {
	outputs.upToDateWhen { false }
	systemProperties["geb.env"] = System.getProperty("geb.env", "chrome")
	if (System.properties["geb.env"] == "phantomJs") {
		dependsOn unzipPhantomJs
	}
	def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
	systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}

task wrapper(type: Wrapper) {
	gradleVersion = gradleWrapperVersion
}
